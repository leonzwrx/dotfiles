### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4

# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l

# flock wrapper for running only one process
set $flock $HOME/.config/sway/scripts/flock.sh

# Terminal
set $term kitty
set $term_cwd $term -d "$($HOME/.config/sway/scripts/swaycwd.sh 2>/dev/null || echo $HOME)"
set $term_float footclient -a floating_shell

# File manager
set $filer pcmanfm

# Your preferred application launcher
set $menu rofi -show drun -terminal $term -show-icons -modi "window,run,drun" -theme fancy

# Optionally, use wofi - Converted swayrd to use rofi and rofimoji uses rofi as well. all can use wofi but sticking with rofi for now
#set $menu wofi --show drun --allow-images --allow-markup --hide-scroll --no-actions --lines 10 --width 600 --term $term --prompt "Search"

# Add --to-code to bindsym, support for non-latin layouts
set $bindsym bindsym --to-code

# Volume notification
set $volume_bar $HOME/.config/sway/scripts/volume-notify.sh

# Brightness notification
set $brightness_bar $HOME/.config/sway/scripts/brightness-notify.sh

# brightness control
set $brightness $HOME/.config/sway/scripts/brightness.sh
set $brightness_up $brightness up && $brightness_bar
set $brightness_down $brightness down && $brightness_bar

# volume control - 
set $volume_down pulsemixer --change-volume -5 && $volume_bar
set $volume_up pulsemixer --change-volume +5 && $volume_bar
set $volume_mute pulsemixer --toggle-mute && $volume_bar

# If switching to a different bluetooth app
# bluetooth menu
# set $bluetooth $flock $term_float bluetuith

# PulseAudio command
set $pulseaudio $term_float_portrait pulsemixer

# calendar application
set $calendar $term_float khal interactive

# help overlay
set $help_menu '[ -x "$(command -v nwg-wrapper)" ] && [ -f $HOME/.config/nwg-wrapper/help.sh ] && $HOME/.config/sway/scripts/help.sh'

# help overlay command
set $help $HOME/.config/sway/scripts/help.sh --toggle

# lock the screen
set $lock $HOME/.config/sway/scripts/lock.sh

# workspace names
set $ws1 number 1
set $ws2 number 2
set $ws3 number 3
set $ws4 number 4
set $ws5 number 5
set $ws6 number 6
set $ws7 number 7
set $ws8 number 8
set $ws9 number 9
set $ws10 number 10

# screenshot
set $grimshot /usr/bin/grimshot
set $pipe_output $grimshot save output -
set $pipe_selection $grimshot save area -
set $pipe_active $grimshot save active -
set $notify_paste bash -c '[[ $(wl-paste -l) == "image/png" ]] && notify-send "Screenshot copied to clipboard"'
set $swappy swappy -f -

set $screenshot_screen $pipe_output | $swappy && $notify_paste
set $screenshot_selection $pipe_selection | $swappy && $notify_paste
set $screenshot_active $pipe_active | $swappy && $notify_paste


### Idle configuration - THIS IS STILL MORE RELIABLE THAN using swayidle systemd service
#
# Laptop:
#   - Dim screen after 240s
#   - Lock after 600s
#   - Turn screen off after 750s
#   - Suspend after 900s on battery
#   - Suspend after 3600s on AC
#   - On resume: restore brightness and keyboard backlight
#
# Desktop:
#   - Lock after 1800s
#   - No dimming or screen power-off
#
# Common:
#   - Lock before suspend, pause media, small delay before sleep

set $idle_timeout 240
set $locking_timeout 600
set $locking_timeout_desktop 1800
set $screen_timeout 750
set $sleep_timeout_bat 900
set $sleep_timeout_ac 3600
set $sleep_delay 2
set $locking $HOME/.config/sway/scripts/lock.sh

set $swayidle swayidle -w \
    timeout $idle_timeout '[ -d /sys/class/power_supply/BAT0 ] && brightnessctl -s && brightnessctl set 10' \
    resume '[ -d /sys/class/power_supply/BAT0 ] && brightnessctl -r' \
    timeout $locking_timeout '[ -d /sys/class/power_supply/BAT0 ] && exec $locking' \
    timeout $locking_timeout_desktop '[ ! -d /sys/class/power_supply/BAT0 ] && exec $locking' \
    timeout $screen_timeout '[ -d /sys/class/power_supply/BAT0 ] && $HOME/.config/sway/scripts/kbd-backlight.sh off && swaymsg "output * power off"' \
    resume '[ -d /sys/class/power_supply/BAT0 ] && $HOME/.config/sway/scripts/kbd-backlight.sh on && swaymsg "output * power on"' \
    timeout $sleep_timeout_bat '[ -d /sys/class/power_supply/BAT0 ] && systemctl suspend' \
    timeout $sleep_timeout_ac '[ ! -d /sys/class/power_supply/BAT0 ] && systemctl suspend' \
    before-sleep 'playerctl pause' \
    before-sleep 'exec $locking & sleep $sleep_delay' \
    after-resume '[ -d /sys/class/power_supply/BAT0 ] && $HOME/.config/sway/scripts/kbd-backlight.sh on && swaymsg "output * power on" && brightnessctl -r'

# PolicyKit agent
set $polkit_agent /usr/libexec/polkit-mate-authentication-agent-1

# Night color
set $wlsunset '[ -x "$(command -v wlsunset)" ] && $HOME/.config/sway/scripts/sunset.sh "on"'

# Autotiling script
set $autotiling '[ -x "$(command -v autotiling)" ] && autotiling -w 1'

# switch between top-level containers (windows) in a workspace
set $switch_toplevel '[ -f $HOME/.config/sway/scripts/switch-top-level.py ] && $HOME/.config/sway/scripts/switch-top-level.py'

# restart kanshi https://github.com/emersion/kanshi/issues/43#issuecomment-531679213
set $kanshi '[ -x "$(command -v kanshi)" ] && pkill kanshi; exec kanshi'

# Start PCmanFM as a daemon
set $pcmanfm_daemon '[ -x "$(command -v pcmanfm)" ] && pcmanfm -d'

# Clipboard manager
set $cliphist_store '[ -x "$(command -v wl-paste)" ] && [ -x "$(command -v cliphist)" ] && wl-paste --watch cliphist store'
set $cliphist_store_images '[ -x "$(command -v wl-paste)" ] && [ -x "$(command -v cliphist)" ] && wl-paste --type image --watch cliphist store'
set $cliphist_watch '[ -x "$(command -v wl-paste)" ] && [ -x "$(command -v cliphist)" ] && wl-paste --watch pkill -RTMIN+9 waybar'
exec wl-paste --type text --watch cliphist store
exec wl-paste --type image --watch cliphist store

# Clipboard tool - switched to nwg-clipman
#set $clipboard clipman pick --tool rofi -T'--prompt=Clipboard -i'
set $clipboard nwg-clipman

# Start playerctl as daemon
set $watch_playerctl '[ -x "$(command -v playerctl)" ] && pkill playerctl; playerctl -a metadata --format \'{{status}} {{title}}\' --follow | while read line; do pkill -RTMIN+5 waybar; done'

# Notifications from Swappy
set $swappy_notify '[ -x "$(command -v swappy)" ] && $HOME/.config/sway/scripts/screenshot-notify.sh'

# Toggle shortcuts inhibition mode for the current focused window
set $toggle_shortcuts_inhibitor 'swaymsg "seat - shortcuts_inhibitor toggle"'
